#!/usr/bin/env node
'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _getDependencyNames = require('./../utilities/getDependencyNames');

var _getDependencyNames2 = _interopRequireDefault(_getDependencyNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var publishScriptCommandHandler = function publishScriptCommandHandler(argv) {
    var packagePath = _path2.default.resolve(process.cwd(), 'package.json');
    var packageDefinition = JSON.parse(_fs2.default.readFileSync(packagePath, 'utf8'));
    var bundledDependencyNames = packageDefinition.bundledDependencies;

    if (!bundledDependencyNames.length) {
        throw new Error('bundledDependencies cannot be empty.');
    }

    console.log(bundledDependencyNames.join(' '));
};

var updateCommandBuilder = function updateCommandBuilder(subYargs) {
    return subYargs.options({
        exclude: {
            default: [],
            describe: 'A space-separated list of dependencies not to include in the bundledDependencies definition.',
            type: 'array'
        }
    });
};

var updateCommandHandler = function updateCommandHandler(argv) {
    var excludeDependencyNames = argv.exclude;
    var packagePath = _path2.default.resolve(process.cwd(), 'package.json');
    var packageDefinition = JSON.parse(_fs2.default.readFileSync(packagePath, 'utf8'));
    var packageDependencyNames = (0, _getDependencyNames2.default)(packageDefinition);
    var bundledDependencyNames = packageDependencyNames.filter(function (dependencyName) {
        return excludeDependencyNames.indexOf(dependencyName) === -1;
    });

    delete packageDefinition.bundleDependencies;

    packageDefinition.bundledDependencies = bundledDependencyNames;

    _fs2.default.writeFileSync(packagePath, JSON.stringify(packageDefinition, '', 2));
};

_yargs2.default.help().strict().command('list-bundled-dependencies', 'Lists names of bundled dependencies.', publishScriptCommandHandler).command('update', 'Updates package.json bundledDependencies definition.', updateCommandBuilder, updateCommandHandler).argv;
//# sourceMappingURL=index.js.map
