{"version":3,"sources":["bin/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAOA,IAAM,8BAA8B,SAA9B,2BAA8B,CAAC,IAAD,EAAU;AAC1C,QAAM,cAAc,eAAK,OAAL,CAAa,QAAQ,GAAR,EAAb,EAA4B,cAA5B,CAAd,CADoC;AAE1C,QAAM,oBAAoB,KAAK,KAAL,CAAW,aAAG,YAAH,CAAgB,WAAhB,EAA6B,MAA7B,CAAX,CAApB,CAFoC;AAG1C,QAAM,yBAAyB,kBAAkB,mBAAlB,CAHW;;AAK1C,QAAI,CAAC,uBAAuB,MAAvB,EAA+B;AAChC,cAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN,CADgC;KAApC;;AAIA,YAAQ,GAAR,CAAY,uBAAuB,IAAvB,CAA4B,GAA5B,CAAZ,EAT0C;CAAV;;AAYpC,IAAM,uBAAuB,SAAvB,oBAAuB,CAAC,QAAD,EAAc;AACvC,WAAO,SACF,OADE,CACM;AACL,iBAAS;AACL,qBAAS,EAAT;AACA,sBAAU,8FAAV;AACA,kBAAM,OAAN;SAHJ;KAFD,CAAP,CADuC;CAAd;;AAW7B,IAAM,uBAAuB,SAAvB,oBAAuB,CAAC,IAAD,EAAU;AACnC,QAAM,yBAAyB,KAAK,OAAL,CADI;AAEnC,QAAM,cAAc,eAAK,OAAL,CAAa,QAAQ,GAAR,EAAb,EAA4B,cAA5B,CAAd,CAF6B;AAGnC,QAAM,oBAAoB,KAAK,KAAL,CAAW,aAAG,YAAH,CAAgB,WAAhB,EAA6B,MAA7B,CAAX,CAApB,CAH6B;AAInC,QAAM,yBAAyB,kCAAmB,iBAAnB,CAAzB,CAJ6B;AAKnC,QAAM,yBAAyB,uBAC1B,MAD0B,CACnB,UAAC,cAAD,EAAoB;AACxB,eAAO,uBAAuB,OAAvB,CAA+B,cAA/B,MAAmD,CAAC,CAAD,CADlC;KAApB,CADN,CAL6B;;AAUnC,WAAO,kBAAkB,kBAAlB,CAV4B;;AAYnC,sBAAkB,mBAAlB,GAAwC,sBAAxC,CAZmC;;AAcnC,iBAAG,aAAH,CAAiB,WAAjB,EAA8B,KAAK,SAAL,CAAe,iBAAf,EAAkC,EAAlC,EAAsC,CAAtC,CAA9B,EAdmC;CAAV;;AAiB7B,gBACK,IADL,GAEK,MAFL,GAGK,OAHL,CAGa,2BAHb,EAG0C,sCAH1C,EAGkF,2BAHlF,EAIK,OAJL,CAIa,QAJb,EAIuB,sDAJvB,EAI+E,oBAJ/E,EAIqG,oBAJrG,EAKK,IALL","file":"bin/index.js","sourcesContent":["\n\nimport fs from 'fs';\nimport path from 'path';\nimport yargs from 'yargs';\nimport getDependencyNames from './../utilities/getDependencyNames';\n\nconst publishScriptCommandHandler = (argv) => {\n    const packagePath = path.resolve(process.cwd(), 'package.json');\n    const packageDefinition = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n    const bundledDependencyNames = packageDefinition.bundledDependencies;\n\n    if (!bundledDependencyNames.length) {\n        throw new Error('bundledDependencies cannot be empty.');\n    }\n\n    console.log(bundledDependencyNames.join(' '));\n};\n\nconst updateCommandBuilder = (subYargs) => {\n    return subYargs\n        .options({\n            exclude: {\n                default: [],\n                describe: 'A space-separated list of dependencies not to include in the bundledDependencies definition.',\n                type: 'array'\n            }\n        });\n};\n\nconst updateCommandHandler = (argv) => {\n    const excludeDependencyNames = argv.exclude;\n    const packagePath = path.resolve(process.cwd(), 'package.json');\n    const packageDefinition = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n    const packageDependencyNames = getDependencyNames(packageDefinition);\n    const bundledDependencyNames = packageDependencyNames\n        .filter((dependencyName) => {\n            return excludeDependencyNames.indexOf(dependencyName) === -1;\n        });\n\n    delete packageDefinition.bundleDependencies;\n\n    packageDefinition.bundledDependencies = bundledDependencyNames;\n\n    fs.writeFileSync(packagePath, JSON.stringify(packageDefinition, '', 2));\n};\n\nyargs\n    .help()\n    .strict()\n    .command('list-bundled-dependencies', 'Lists names of bundled dependencies.', publishScriptCommandHandler)\n    .command('update', 'Updates package.json bundledDependencies definition.', updateCommandBuilder, updateCommandHandler)\n    .argv;\n"],"sourceRoot":"/source/"}